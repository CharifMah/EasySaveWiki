{
  "README.html": {
    "href": "README.html",
    "title": "Quick Start | EasySaveWiki",
    "keywords": "Quick Start Build your technical documentation site with docfx. Converts .NET assembly, XML code comment, REST API Swagger files and markdown into rendered HTML pages, JSON model or PDF files. Create a New Website In this section we will build a simple documentation site on your local machine. Prerequisites Familiarity with the command line Install .NET SDK 6.0 or higher Make sure you have .NET SDK installed, then open a terminal and enter the following command to install the latest docfx: dotnet tool update -g docfx To create a new docset, run: docfx init This command walks you through creating a new docfx project under the current working directory. To build the docset, run: docfx docfx.json --serve Now you can preview the website on http://localhost:8080. To preview your local changes, save changes then run this command in a new terminal to rebuild the website: docfx docfx.json Publish to GitHub Pages Docfx produces static HTML files under the _site folder ready for publishing to any static site hosting servers. To publish to GitHub Pages: Enable GitHub Pages. Upload _site folder to GitHub Pages using GitHub actions. This is an example GitHub action file that publishes documents to the gh-pages branch: # Your GitHub workflow file under .github/workflows/ # Trigger the action on push to main on: push: branches: - main # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: actions: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \"pages\" cancel-in-progress: false jobs: publish-docs: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 - name: Dotnet Setup uses: actions/setup-dotnet@v3 with: dotnet-version: 8.x - run: dotnet tool update -g docfx - run: docfx <docfx-project-path>/docfx.json - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: # Upload entire repository path: '<docfx-project-path>/_site' - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 Use the NuGet Library You can also use docfx as a NuGet library: <PackageReference Include=\"Docfx.App\" Version=\"2.73.2\" /> Then build a docset using: await Docfx.Docset.Build(\"docfx.json\"); See API References for additional APIs. Next Steps Write Articles Organize Contents Configure Website Add .NET API Docs"
  },
  "api/EasySave.ViewModels.BaseViewModel.html": {
    "href": "api/EasySave.ViewModels.BaseViewModel.html",
    "title": "Class BaseViewModel | EasySaveWiki",
    "keywords": "Class BaseViewModel Namespace EasySave.ViewModels Assembly EasySave.dll Classe abstraite BaseViewModel public abstract class BaseViewModel : INotifyPropertyChanged Inheritance object BaseViewModel Implements INotifyPropertyChanged Derived JobViewModel LangueViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NotifyPropertyChanged(string) Méthode à appler pour avertir d'une modification protected void NotifyPropertyChanged(string propertyName = \"\") Parameters propertyName string Nom de la property modifiée (authomatiquement déterminé si appelé directement dans le setter une property) Events PropertyChanged Evénement de modification d'une property public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/EasySave.ViewModels.JobViewModel.html": {
    "href": "api/EasySave.ViewModels.JobViewModel.html",
    "title": "Class JobViewModel | EasySaveWiki",
    "keywords": "Class JobViewModel Namespace EasySave.ViewModels Assembly EasySave.dll Classe JobViewModel public class JobViewModel : BaseViewModel, INotifyPropertyChanged Inheritance object BaseViewModel JobViewModel Implements INotifyPropertyChanged Inherited Members BaseViewModel.PropertyChanged BaseViewModel.NotifyPropertyChanged(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JobViewModel() Constructeur de JobViewModel initialise le JobManager public JobViewModel() Properties JobManager JobManager public CJobManager JobManager { get; set; } Property Value CJobManager Methods CreateBackupJob(CJob) Crée un nouveau job de sauvegarde public bool CreateBackupJob(CJob lJob) Parameters lJob CJob Job à créer Returns bool Succès de la création DeleteJobs(List<CJob>) Supprimer un ou plusieurs jobs public bool DeleteJobs(List<CJob> pJobs) Parameters pJobs List<CJob> List de jobs a delete Returns bool vrai si les jobs on été delete LoadJobs(bool, string) Charge la liste des jobs depuis un fichier public void LoadJobs(bool IsDefaultFile = true, string pPath = null) Parameters IsDefaultFile bool Indique si le fichier par défaut doit être chargé pPath string Chemin du fichier à charger, vide pour le fichier par défaut RunJobs(List<CJob>) Lance l'exécution des jobs sélectionnés public List<CJob> RunJobs(List<CJob> pJobs) Parameters pJobs List<CJob> Liste des jobs à lancer Returns List<CJob> Liste mise à jour des jobs avec leur état après exécution SaveJobs() Sauvegarde la configuration des jobs public void SaveJobs()"
  },
  "api/EasySave.ViewModels.LangueViewModel.html": {
    "href": "api/EasySave.ViewModels.LangueViewModel.html",
    "title": "Class LangueViewModel | EasySaveWiki",
    "keywords": "Class LangueViewModel Namespace EasySave.ViewModels Assembly EasySave.dll public class LangueViewModel : BaseViewModel, INotifyPropertyChanged Inheritance object BaseViewModel LangueViewModel Implements INotifyPropertyChanged Inherited Members BaseViewModel.PropertyChanged BaseViewModel.NotifyPropertyChanged(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LangueViewModel() public LangueViewModel() Properties Langue public CLangue Langue { get; set; } Property Value CLangue Methods SetLanguage(string) Set the current language public bool SetLanguage(string pCultureInfo) Parameters pCultureInfo string Returns bool true if the language was changed"
  },
  "api/EasySave.ViewModels.MainViewModel.html": {
    "href": "api/EasySave.ViewModels.MainViewModel.html",
    "title": "Class MainViewModel | EasySaveWiki",
    "keywords": "Class MainViewModel Namespace EasySave.ViewModels Assembly EasySave.dll public class MainViewModel Inheritance object MainViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MainViewModel() public MainViewModel() Properties JobVm public JobViewModel JobVm { get; set; } Property Value JobViewModel LangueVm public LangueViewModel LangueVm { get; set; } Property Value LangueViewModel"
  },
  "api/EasySave.ViewModels.html": {
    "href": "api/EasySave.ViewModels.html",
    "title": "Namespace EasySave.ViewModels | EasySaveWiki",
    "keywords": "Namespace EasySave.ViewModels Classes BaseViewModel Classe abstraite BaseViewModel JobViewModel Classe JobViewModel LangueViewModel MainViewModel"
  },
  "api/EasySave.Views.BaseView.html": {
    "href": "api/EasySave.Views.BaseView.html",
    "title": "Class BaseView | EasySaveWiki",
    "keywords": "Class BaseView Namespace EasySave.Views Assembly EasySave.dll Vue de l'application public abstract class BaseView Inheritance object BaseView Derived LangueView View Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Title public abstract string Title { get; } Property Value string Methods Run() Lance le deroulement de la vue dans l'interface de maniere procedurale public abstract void Run()"
  },
  "api/EasySave.Views.ConsoleExtention.html": {
    "href": "api/EasySave.Views.ConsoleExtention.html",
    "title": "Class ConsoleExtention | EasySaveWiki",
    "keywords": "Class ConsoleExtention Namespace EasySave.Views Assembly EasySave.dll Console extension class adds additional display functionality public static class ConsoleExtention Inheritance object ConsoleExtention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Clear() Clear the console and set the input to -1 public static void Clear() ReadFile(string, Regex, string) Read a file with GTK CrossPlatform interface if it fail open classic Console Interface public static string ReadFile(string pDescription, Regex pRegexExtentions = null, string pCurrentFolder = null) Parameters pDescription string Description for the interface pRegexExtentions Regex pCurrentFolder string Returns string return the selected file full path ReadFolder(string) Read a folder with GTK CrossPlatform interface if it fail open classic Console Interface public static string ReadFolder(string pDescription) Parameters pDescription string Description for the interface Returns string return the selected folder full path ReadResponse(string, Regex?, Func<string, bool>) Read user input char by char public static string ReadResponse(string pMessage, Regex? pRegex = null, Func<string, bool> pIsValid = null) Parameters pMessage string Message to loop through if the user makes an input error pRegex Regex Regex permettant de validée l'entrée utilisateur pIsValid Func<string, bool> Fonction qui prend un string en parametre et valide l'entrée utilisateur Returns string user input Remarks Mahmoud Charif - 05/02/2024 - Création WriteLineError(string) Write line a error in red public static void WriteLineError(string pMessage) Parameters pMessage string message to write WriteLineSelected(string) Write a default message + input public static void WriteLineSelected(string pInput) Parameters pInput string WriteLineSucces(string) Write line a succes in green public static void WriteLineSucces(string pMessage) Parameters pMessage string message to write WriteLineWarning(string) WriteLine the message Warning in DarkYellow public static void WriteLineWarning(string pMessage) Parameters pMessage string message to write WritePath(string) Write Path with UNC Format in yellow public static void WritePath(string pPath) Parameters pPath string path to write WriteSubtitle(string, ConsoleColor) WriteSubTitle public static void WriteSubtitle(string pSubtitle, ConsoleColor pColor = ConsoleColor.DarkGray) Parameters pSubtitle string subvtitle pColor ConsoleColor couleur du subtitle WriteTitle(string, ConsoleColor) Write a personalized Title with separator public static void WriteTitle(string pTitle, ConsoleColor pColor = ConsoleColor.White) Parameters pTitle string Title to write pColor ConsoleColor"
  },
  "api/EasySave.Views.LangueView.html": {
    "href": "api/EasySave.Views.LangueView.html",
    "title": "Class LangueView | EasySaveWiki",
    "keywords": "Class LangueView Namespace EasySave.Views Assembly EasySave.dll Vue des langues public class LangueView : BaseView Inheritance object BaseView LangueView Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LangueView(LangueViewModel) public LangueView(LangueViewModel pJobVm) Parameters pJobVm LangueViewModel Properties Title public override string Title { get; } Property Value string Methods ListLanguage() Liste les langue disponibles public void ListLanguage() Run() Lance la selection du language public override void Run()"
  },
  "api/EasySave.Views.View.html": {
    "href": "api/EasySave.Views.View.html",
    "title": "Class View | EasySaveWiki",
    "keywords": "Class View Namespace EasySave.Views Assembly EasySave.dll Vue principale (Menu) public class View : BaseView Inheritance object BaseView View Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors View() public View() Properties Menu Chaîne de caractères contenant le menu public string Menu { get; } Property Value string Title Titre affiché pour l'application public override string Title { get; } Property Value string Methods Run() Start the main program public override void Run()"
  },
  "api/EasySave.Views.html": {
    "href": "api/EasySave.Views.html",
    "title": "Namespace EasySave.Views | EasySaveWiki",
    "keywords": "Namespace EasySave.Views Classes BaseView Vue de l'application ConsoleExtention Console extension class adds additional display functionality LangueView Vue des langues View Vue principale (Menu)"
  },
  "api/LogsModels.CLogBase.html": {
    "href": "api/LogsModels.CLogBase.html",
    "title": "Class CLogBase | EasySaveWiki",
    "keywords": "Class CLogBase Namespace LogsModels Assembly LogsModels.dll Log de base [DataContract] public abstract class CLogBase : IPath Inheritance object CLogBase Implements IPath Derived CLogDaily CLogState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Date Date of the log public virtual DateTime Date { get; set; } Property Value DateTime Name Name of the Log public virtual string Name { get; set; } Property Value string SourceDirectory Source directory public virtual string SourceDirectory { get; set; } Property Value string TargetDirectory Target directory public virtual string TargetDirectory { get; set; } Property Value string TotalSize Total transfer file size public virtual double TotalSize { get; set; } Property Value double"
  },
  "api/LogsModels.CLogDaily.html": {
    "href": "api/LogsModels.CLogDaily.html",
    "title": "Class CLogDaily | EasySaveWiki",
    "keywords": "Class CLogDaily Namespace LogsModels Assembly LogsModels.dll Classe de log journalier public class CLogDaily : CLogBase, IPath Inheritance object CLogBase CLogDaily Implements IPath Inherited Members CLogBase.Name CLogBase.Date CLogBase.TotalSize CLogBase.SourceDirectory CLogBase.TargetDirectory object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TransfertTime Temps de transfert en miliseconde public double TransfertTime { get; set; } Property Value double"
  },
  "api/LogsModels.CLogState.html": {
    "href": "api/LogsModels.CLogState.html",
    "title": "Class CLogState | EasySaveWiki",
    "keywords": "Class CLogState Namespace LogsModels Assembly LogsModels.dll Classe de journal d'état représentant l'état de transfert d'une liste de fichiers [DataContract] public class CLogState : CLogBase, IPath Inheritance object CLogBase CLogState Implements IPath Inherited Members CLogBase.Date CLogBase.TotalSize CLogBase.SourceDirectory CLogBase.TargetDirectory object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CLogState() Constructeur de CLogState public CLogState() Properties ElapsedMilisecond Nombre de millisecondes écoulées public long ElapsedMilisecond { get; set; } Property Value long EligibleFileCount Nombre de fichier eligible au deplacement (Nombre de fichier Total) public int EligibleFileCount { get; set; } Property Value int IsActive Indique si le job est actif ou non public bool IsActive { get; set; } Property Value bool Name Name of the Log public override string Name { get; set; } Property Value string RemainingFiles Nombre de fichier restant public int RemainingFiles { get; set; } Property Value int"
  },
  "api/LogsModels.IPath.html": {
    "href": "api/LogsModels.IPath.html",
    "title": "Interface IPath | EasySaveWiki",
    "keywords": "Interface IPath Namespace LogsModels Assembly LogsModels.dll Interface IPath public interface IPath Properties SourceDirectory Répertoire source string SourceDirectory { get; set; } Property Value string TargetDirectory Répertoire cible string TargetDirectory { get; set; } Property Value string"
  },
  "api/LogsModels.html": {
    "href": "api/LogsModels.html",
    "title": "Namespace LogsModels | EasySaveWiki",
    "keywords": "Namespace LogsModels Classes CLogBase Log de base CLogDaily Classe de log journalier CLogState Classe de journal d'état représentant l'état de transfert d'une liste de fichiers Interfaces IPath Interface IPath"
  },
  "api/Models.Backup.CJob.html": {
    "href": "api/Models.Backup.CJob.html",
    "title": "Class CJob | EasySaveWiki",
    "keywords": "Class CJob Namespace Models.Backup Assembly Models.dll Représente un travail/tâche à exécuter [DataContract] public class CJob : IPath Inheritance object CJob Implements IPath Inherited Members object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CJob(string, string, string, ETypeBackup) Constructeur de job public CJob(string pName, string pSourceDirectory, string pTargetDirectory, ETypeBackup pTypeBackup) Parameters pName string Nom du job pSourceDirectory string Chemin source pTargetDirectory string Chemin destination pTypeBackup ETypeBackup Type de sauvegarde Remarks Mahmoud Charif - 30/01/2024 - Création Properties BackupType Type de sauvegarde public ETypeBackup BackupType { get; set; } Property Value ETypeBackup Name Nom du job de sauvegarde public string Name { get; set; } Property Value string SourceDirectory Répertoire source à sauvegarder public string SourceDirectory { get; set; } Property Value string TargetDirectory Répertoire cible de la sauvegarde public string TargetDirectory { get; set; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Run(SauveJobs) Lance l'exécution du job de sauvegarde public void Run(SauveJobs pSauveJobs) Parameters pSauveJobs SauveJobs Objet de sauvegarde des données de jobs"
  },
  "api/Models.Backup.CJobManager.html": {
    "href": "api/Models.Backup.CJobManager.html",
    "title": "Class CJobManager | EasySaveWiki",
    "keywords": "Class CJobManager Namespace Models.Backup Assembly Models.dll Gestionnaire de jobs [DataContract] public class CJobManager Inheritance object CJobManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CJobManager() Contructeur de CJobManager initialise le chemin de sauvegarde public CJobManager() Properties Jobs Liste des jobs gérés public List<CJob> Jobs { get; } Property Value List<CJob> Name Nom du gestionnaire public string Name { get; set; } Property Value string SauveCollection Interface de sauvegarde des données public ISauve SauveCollection { get; set; } Property Value ISauve Methods CreateBackupJob(CJob) Crée un nouveau job de sauvegarde public bool CreateBackupJob(CJob lJob) Parameters lJob CJob Objet représentant le job de sauvegarde à créer Returns bool True si le job a été créé avec succès, false sinon Remarks Created by Mehmeti Faik on 06/02/2024 Updated validation logic to handle null parameters DeleteJobs(List<CJob>) Supprimé un job public bool DeleteJobs(List<CJob> pJobs) Parameters pJobs List<CJob> List de jobs à supprimer Returns bool true si reussi Remarks Mehmeti faik RunJobs(List<CJob>) Lance l'exécution de la liste de jobs passée en paramètre public List<CJob> RunJobs(List<CJob> pJobs) Parameters pJobs List<CJob> Liste des jobs à exécuter Returns List<CJob> La liste des jobs, mise à jour avec leur état après exécution SaveJobs() Sauvegarde le JobManager public void SaveJobs()"
  },
  "api/Models.Backup.ETypeBackup.html": {
    "href": "api/Models.Backup.ETypeBackup.html",
    "title": "Enum ETypeBackup | EasySaveWiki",
    "keywords": "Enum ETypeBackup Namespace Models.Backup Assembly Models.dll Enumeration du type de backup public enum ETypeBackup Fields COMPLET = 0 DIFFERENTIEL = 1"
  },
  "api/Models.Backup.html": {
    "href": "api/Models.Backup.html",
    "title": "Namespace Models.Backup | EasySaveWiki",
    "keywords": "Namespace Models.Backup Classes CJob Représente un travail/tâche à exécuter CJobManager Gestionnaire de jobs Enums ETypeBackup Enumeration du type de backup"
  },
  "api/Models.CLangue.html": {
    "href": "api/Models.CLangue.html",
    "title": "Class CLangue | EasySaveWiki",
    "keywords": "Class CLangue Namespace Models Assembly Models.dll Classe de la langue de l'application [DataContract] public class CLangue Inheritance object CLangue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CLangue() Constructeur de la classe Clangue Init the language with the installed culture of the operating system public CLangue() Properties Languages Dictionnaire de langues disponnible dans l'application public Dictionary<int, string> Languages { get; set; } Property Value Dictionary<int, string> SelectedCulture public string SelectedCulture { get; set; } Property Value string Methods SetLanguage(string) Set the current UI culture public bool SetLanguage(string pCultureInfo) Parameters pCultureInfo string give a number Returns bool true if the language was changed"
  },
  "api/Models.CSettings.html": {
    "href": "api/Models.CSettings.html",
    "title": "Class CSettings | EasySaveWiki",
    "keywords": "Class CSettings Namespace Models Assembly Models.dll Classe des settings de l'application permettant le chargement et la sauvegarde des parametres de l'utilisateur [DataContract] public class CSettings Inheritance object CSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance public static CSettings Instance { get; } Property Value CSettings JobConfigFolderPath Emplacement du répertoire dans lequel le fichier de configuration du travail est stocké public string JobConfigFolderPath { get; set; } Property Value string JobDefaultConfigPath Emplacement par défaut du répertoire dans lequel le fichier de configuration du travail est stocké public string JobDefaultConfigPath { get; set; } Property Value string Langue Langue préférer de l'utilisateur public CLangue Langue { get; set; } Property Value CLangue Methods ~CSettings() protected ~CSettings() LoadJobsFile(string) Charge la liste des jobs depuis un fichier public CJobManager LoadJobsFile(string pPath = null) Parameters pPath string Chemin du fichier de configuration. Null pour le fichier par défaut. Returns CJobManager Instance du gestionnaire de jobs chargé LoadSettings() Chargement des paramètres à partir d'un fichier json public void LoadSettings() SaveSettings() Enregistrer les paramètres dans un fichier json public void SaveSettings()"
  },
  "api/Models.Settings.html": {
    "href": "api/Models.Settings.html",
    "title": "Class Settings | EasySaveWiki",
    "keywords": "Class Settings Namespace Models Assembly Models.dll Classe des settings de l'application permettant le chargement et la sauvegarde des parametres de l'utilisateur [DataContract] public class Settings Inheritance object Settings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance public static Settings Instance { get; } Property Value Settings JobConfigFolderPath Emplacement du répertoire dans lequel le fichier de configuration du travail est stocké public string JobConfigFolderPath { get; set; } Property Value string JobDefaultConfigPath Emplacement par défaut du répertoire dans lequel le fichier de configuration du travail est stocké public string JobDefaultConfigPath { get; set; } Property Value string Langue Langue préférer de l'utilisateur public CLangue Langue { get; set; } Property Value CLangue Methods ~Settings() protected ~Settings() LoadJobsFile(string) Charge la liste des jobs depuis un fichier public CJobManager LoadJobsFile(string pPath = null) Parameters pPath string Chemin du fichier de configuration. Null pour le fichier par défaut. Returns CJobManager Instance du gestionnaire de jobs chargé LoadSettings() Chargement des paramètres à partir d'un fichier json public void LoadSettings() SaveSettings() Enregistrer les paramètres dans un fichier json public void SaveSettings()"
  },
  "api/Models.html": {
    "href": "api/Models.html",
    "title": "Namespace Models | EasySaveWiki",
    "keywords": "Namespace Models Classes CLangue Classe de la langue de l'application CSettings Classe des settings de l'application permettant le chargement et la sauvegarde des parametres de l'utilisateur"
  },
  "api/Ressources.Strings.html": {
    "href": "api/Ressources.Strings.html",
    "title": "Class Strings | EasySaveWiki",
    "keywords": "Class Strings Namespace Ressources Assembly Ressources.dll A strongly-typed resource class, for looking up localized strings, etc. public class Strings Inheritance object Strings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ResourceManager Returns the cached ResourceManager instance used by this class. public static ResourceManager ResourceManager { get; } Property Value ResourceManager"
  },
  "api/Ressources.html": {
    "href": "api/Ressources.html",
    "title": "Namespace Ressources | EasySaveWiki",
    "keywords": "Namespace Ressources Classes Strings A strongly-typed resource class, for looking up localized strings, etc."
  },
  "api/Stockage.BaseSave.html": {
    "href": "api/Stockage.BaseSave.html",
    "title": "Class BaseSave | EasySaveWiki",
    "keywords": "Class BaseSave Namespace Stockage Assembly Stockage.dll public abstract class BaseSave : ISauve Inheritance object BaseSave Implements ISauve Derived SauveCollection SauveJobs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseSave(string) Sauvgarde public BaseSave(string pPath) Parameters pPath string Directory Path Properties FullPath public string FullPath { get; set; } Property Value string Options public JsonSerializerSettings Options { get; } Property Value JsonSerializerSettings Methods CopyDirectory(DirectoryInfo, DirectoryInfo, bool, ref CLogState, bool) public virtual void CopyDirectory(DirectoryInfo pSourceDir, DirectoryInfo pTargetDir, bool pRecursive, ref CLogState pLogState, bool pForce = false) Parameters pSourceDir DirectoryInfo pTargetDir DirectoryInfo pRecursive bool pLogState CLogState pForce bool CopyDirectory(DirectoryInfo, DirectoryInfo, bool, bool) Copy files and directory from the soruce path to the destinationPath public virtual void CopyDirectory(DirectoryInfo pSourceDir, DirectoryInfo pTargetDir, bool pRecursive, bool pForce = false) Parameters pSourceDir DirectoryInfo Path of the directory you want tot copy pTargetDir DirectoryInfo Path of the target directory pRecursive bool True if recursive pForce bool true if overwrite Exceptions DirectoryNotFoundException Sauver<T>(T, string, bool, string) Crée un fichier Json par default avec les Settings public virtual void Sauver<T>(T pData, string pFileName, bool pAppend = false, string pExtention = \"json\") Parameters pData T Data a sauvgarde pFileName string Name of the file pAppend bool pExtention string Extention of the file can be null Type Parameters T"
  },
  "api/Stockage.ChargerCollection.html": {
    "href": "api/Stockage.ChargerCollection.html",
    "title": "Class ChargerCollection | EasySaveWiki",
    "keywords": "Class ChargerCollection Namespace Stockage Assembly Stockage.dll public class ChargerCollection : ICharge Inheritance object ChargerCollection Implements ICharge Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChargerCollection(string) Charger un object public ChargerCollection(string pPath) Parameters pPath string Chemin du fichier Methods Charger<T>(string) Charger un fichier public T Charger<T>(string pFileName) Parameters pFileName string chemin du fichier Returns T Data Cast in Generic Type Type Parameters T Generic Type Remarks Mahmoud Charif - 31/12/2022 - Creation"
  },
  "api/Stockage.Converters.ConcreteCollectionTypeConverter-3.html": {
    "href": "api/Stockage.Converters.ConcreteCollectionTypeConverter-3.html",
    "title": "Class ConcreteCollectionTypeConverter<TCollection, TItem, TBaseItem> | EasySaveWiki",
    "keywords": "Class ConcreteCollectionTypeConverter<TCollection, TItem, TBaseItem> Namespace Stockage.Converters Assembly Stockage.dll Concrete Collection Converter public class ConcreteCollectionTypeConverter<TCollection, TItem, TBaseItem> : JsonConverter where TCollection : ICollection<TBaseItem>, new() where TItem : TBaseItem Type Parameters TCollection Collection TItem Item de la collection TBaseItem Item de base Inheritance object JsonConverter ConcreteCollectionTypeConverter<TCollection, TItem, TBaseItem> Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Mahmoud Charif - 31/12/2022 - Creation Methods CanConvert(Type) Can convert public override bool CanConvert(Type objectType) Parameters objectType Type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) ReadJson public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Stockage.Converters.ConcreteConverter-2.html": {
    "href": "api/Stockage.Converters.ConcreteConverter-2.html",
    "title": "Class ConcreteConverter<TInterface, TConcrete> | EasySaveWiki",
    "keywords": "Class ConcreteConverter<TInterface, TConcrete> Namespace Stockage.Converters Assembly Stockage.dll This convert can be used on any interface definition to instruct the JSON serializer to use a specific concrete class when deserializing the instance. The type specified by TConcrete must implement the interface specified by TInterface. public class ConcreteConverter<TInterface, TConcrete> : JsonConverter where TConcrete : TInterface, new() Type Parameters TInterface The Type that was serialized into the JSON text. TConcrete The Type that specifies the class that will be created. Inheritance object JsonConverter ConcreteConverter<TInterface, TConcrete> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanRead Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read. public override bool CanRead { get; } Property Value bool CanWrite Gets a value indicating whether this Newtonsoft.Json.JsonConverter can write JSON. public override bool CanWrite { get; } Property Value bool Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool Returns true if this instance can convert the specified object type, false otherwise. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Stockage.Converters.ConcreteDictionnaryTypeConverter-4.html": {
    "href": "api/Stockage.Converters.ConcreteDictionnaryTypeConverter-4.html",
    "title": "Class ConcreteDictionnaryTypeConverter<TDictionary, TItem, TKey, TValue> | EasySaveWiki",
    "keywords": "Class ConcreteDictionnaryTypeConverter<TDictionary, TItem, TKey, TValue> Namespace Stockage.Converters Assembly Stockage.dll A JSON converter for dictionaries of generic types public class ConcreteDictionnaryTypeConverter<TDictionary, TItem, TKey, TValue> : JsonConverter where TDictionary : IDictionary<TKey, TValue>, new() where TItem : TValue Type Parameters TDictionary The dictionary type TItem The item type TKey The key type TValue The value type Inheritance object JsonConverter ConcreteDictionnaryTypeConverter<TDictionary, TItem, TKey, TValue> Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Mahmoud Charif - 31/12/2022 - Creation Methods CanConvert(Type) CanConvert public override bool CanConvert(Type objectType) Parameters objectType Type Returns bool ReadJson(JsonReader, Type, object?, JsonSerializer) ReadJson public override object ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object?, JsonSerializer) WriteJson public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Stockage.Converters.html": {
    "href": "api/Stockage.Converters.html",
    "title": "Namespace Stockage.Converters | EasySaveWiki",
    "keywords": "Namespace Stockage.Converters Classes ConcreteCollectionTypeConverter<TCollection, TItem, TBaseItem> Concrete Collection Converter ConcreteConverter<TInterface, TConcrete> This convert can be used on any interface definition to instruct the JSON serializer to use a specific concrete class when deserializing the instance. The type specified by TConcrete must implement the interface specified by TInterface. ConcreteDictionnaryTypeConverter<TDictionary, TItem, TKey, TValue> A JSON converter for dictionaries of generic types"
  },
  "api/Stockage.ICharge.html": {
    "href": "api/Stockage.ICharge.html",
    "title": "Interface ICharge | EasySaveWiki",
    "keywords": "Interface ICharge Namespace Stockage Assembly Stockage.dll Interface sur un chargeur de dictionnaire public interface ICharge Remarks Mahmoud Charif - 31/12/2022- Création Methods Charger<T>(string) Charge le dictionnaire T Charger<T>(string pPath) Parameters pPath string Complete path of the file with extention Returns T Loaded file Type Parameters T Remarks Mahmoud Charif - 31/12/2022 - Creation"
  },
  "api/Stockage.ISauve.html": {
    "href": "api/Stockage.ISauve.html",
    "title": "Interface ISauve | EasySaveWiki",
    "keywords": "Interface ISauve Namespace Stockage Assembly Stockage.dll Interface ISauve public interface ISauve Remarks Mahmoud Charif - 31/12/2022 - Création Methods CopyDirectory(DirectoryInfo, DirectoryInfo, bool, bool) Copy files and directory from the soruce path to the destinationPath void CopyDirectory(DirectoryInfo pSourceDir, DirectoryInfo pTargetDir, bool pRecursive, bool pForce = false) Parameters pSourceDir DirectoryInfo Path of the directory you want tot copy pTargetDir DirectoryInfo Path of the target directory pRecursive bool True if recursive pForce bool true if overwrite Exceptions DirectoryNotFoundException Sauver<T>(T, string, bool, string) Sauvagarde les data dans un fichier void Sauver<T>(T pData, string pFileName, bool pAppend = false, string pExtention = \"json\") Parameters pData T Data to serialize pFileName string File name pAppend bool True si on veux append sur le fichier pExtention string Extention Type Parameters T Remarks Mahmoud Charif - 31/12/2022 - Création"
  },
  "api/Stockage.Load.BaseCharge.html": {
    "href": "api/Stockage.Load.BaseCharge.html",
    "title": "Class BaseCharge | EasySaveWiki",
    "keywords": "Class BaseCharge Namespace Stockage.Load Assembly Stockage.dll Classe abstraite de base pour le chargement d'un object public abstract class BaseCharge : ICharge Inheritance object BaseCharge Implements ICharge Derived ChargerCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseCharge(string) Constructeur public BaseCharge(string pPath) Parameters pPath string Chemin du dossier Remarks Mahmoud Charif - 13/02/2024 - Création Methods Charger<T>(string, bool) Charger un fichier public virtual T Charger<T>(string pFileName, bool pIsFullPath = false) Parameters pFileName string Nom du fichier pIsFullPath bool vrai si le premier parametre est un chemin complet et non le nom du fichier Returns T Data Cast in Generic Type Type Parameters T Type du fichier à charger Remarks Mahmoud Charif - 31/12/2022 - Creation"
  },
  "api/Stockage.Load.ChargerCollection.html": {
    "href": "api/Stockage.Load.ChargerCollection.html",
    "title": "Class ChargerCollection | EasySaveWiki",
    "keywords": "Class ChargerCollection Namespace Stockage.Load Assembly Stockage.dll Classe pour le chargement et la désérialisation d'un fichier public class ChargerCollection : BaseCharge, ICharge Inheritance object BaseCharge ChargerCollection Implements ICharge Inherited Members BaseCharge.Charger<T>(string, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChargerCollection(string) public ChargerCollection(string pPath) Parameters pPath string"
  },
  "api/Stockage.Load.ICharge.html": {
    "href": "api/Stockage.Load.ICharge.html",
    "title": "Interface ICharge | EasySaveWiki",
    "keywords": "Interface ICharge Namespace Stockage.Load Assembly Stockage.dll Interface ICharge public interface ICharge Remarks Mahmoud Charif - 31/12/2022- Création Methods Charger<T>(string, bool) Charger un fichier T Charger<T>(string pPath, bool pIsFullPath = false) Parameters pPath string pIsFullPath bool vrai si le premier parametre est un chemin complet et non le nom du fichier Returns T Data Cast in Generic Type Type Parameters T Type du fichier à charger Remarks Mahmoud Charif - 31/12/2022 - Creation"
  },
  "api/Stockage.Load.html": {
    "href": "api/Stockage.Load.html",
    "title": "Namespace Stockage.Load | EasySaveWiki",
    "keywords": "Namespace Stockage.Load Classes BaseCharge Classe abstraite de base pour le chargement d'un object ChargerCollection Classe pour le chargement et la désérialisation d'un fichier Interfaces ICharge Interface ICharge"
  },
  "api/Stockage.Logs.BaseLogger-1.html": {
    "href": "api/Stockage.Logs.BaseLogger-1.html",
    "title": "Class BaseLogger<T> | EasySaveWiki",
    "keywords": "Class BaseLogger<T> Namespace Stockage.Logs Assembly Stockage.dll Classe de base abstraite pour les loggers. public abstract class BaseLogger<T> : ILogger<T> Type Parameters T Type des objets loggés Inheritance object BaseLogger<T> Implements ILogger<T> Derived CGenericLogger<T> CStringLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseLogger() protected BaseLogger() Properties Datas Collection de données observables public ObservableCollection<T> Datas { get; } Property Value ObservableCollection<T> Methods Clear() Vide la collection de données public virtual void Clear() Log(T, bool, bool, string) Méthode de logging des données public virtual void Log(T pData, bool pSerialize = true, bool pAppend = true, string pFileName = \"Logs\") Parameters pData T Données à logger pSerialize bool Indique si les données doivent être sérialisées avant d'être loggées pAppend bool Indique si on ajoute le logging au fichier existant ou si on recrée le fichier pFileName string Nom du fichier où sont loggées les données"
  },
  "api/Stockage.Logs.CGenericLogger-1.html": {
    "href": "api/Stockage.Logs.CGenericLogger-1.html",
    "title": "Class CGenericLogger<T> | EasySaveWiki",
    "keywords": "Class CGenericLogger<T> Namespace Stockage.Logs Assembly Stockage.dll Classe de logger générique public class CGenericLogger<T> : BaseLogger<T>, ILogger<T> Type Parameters T Type des objets loggés Inheritance object BaseLogger<T> CGenericLogger<T> Implements ILogger<T> Inherited Members BaseLogger<T>.Datas BaseLogger<T>.Log(T, bool, bool, string) BaseLogger<T>.Clear() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Stockage.Logs.CLogger-1.html": {
    "href": "api/Stockage.Logs.CLogger-1.html",
    "title": "Class CLogger<T> | EasySaveWiki",
    "keywords": "Class CLogger<T> Namespace Stockage.Logs Assembly Stockage.dll Classe Logger permettant de Logger des objet et des string dans un fichier public static class CLogger<T> Type Parameters T Inheritance object CLogger<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GenericLogger Logger generic public static CGenericLogger<T> GenericLogger { get; } Property Value CGenericLogger<T> StringLogger Logger de string public static CStringLogger StringLogger { get; } Property Value CStringLogger Methods Clear() Vide les Liste de logs public static void Clear()"
  },
  "api/Stockage.Logs.CStringLogger.html": {
    "href": "api/Stockage.Logs.CStringLogger.html",
    "title": "Class CStringLogger | EasySaveWiki",
    "keywords": "Class CStringLogger Namespace Stockage.Logs Assembly Stockage.dll Logger spécialisé pour les chaines de caractères public class CStringLogger : BaseLogger<string>, ILogger<string> Inheritance object BaseLogger<string> CStringLogger Implements ILogger<string> Inherited Members BaseLogger<string>.Datas BaseLogger<string>.Log(string, bool, bool, string) BaseLogger<string>.Clear() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Stockage.Logs.ILogger-1.html": {
    "href": "api/Stockage.Logs.ILogger-1.html",
    "title": "Interface ILogger<T> | EasySaveWiki",
    "keywords": "Interface ILogger<T> Namespace Stockage.Logs Assembly Stockage.dll Interface ILogger public interface ILogger<T> Type Parameters T Properties Datas Collection de données observables ObservableCollection<T> Datas { get; } Property Value ObservableCollection<T> Methods Log(T, bool, bool, string) Méthode de logging des données void Log(T pData, bool pSerialize, bool pAppend = true, string pFileName = \"Logs\") Parameters pData T Données à logger pSerialize bool Indique si les données doivent être sérialisées avant d'être loggées pAppend bool Indique si on ajoute le logging au fichier existant ou si on recrée le fichier pFileName string Nom du fichier où sont loggées les données Remarks Mahmoud Charif - 10/02/2024 - Création"
  },
  "api/Stockage.Logs.html": {
    "href": "api/Stockage.Logs.html",
    "title": "Namespace Stockage.Logs | EasySaveWiki",
    "keywords": "Namespace Stockage.Logs Classes BaseLogger<T> Classe de base abstraite pour les loggers. CGenericLogger<T> Classe de logger générique CLogger<T> Classe Logger permettant de Logger des objet et des string dans un fichier CStringLogger Logger spécialisé pour les chaines de caractères Interfaces ILogger<T> Interface ILogger"
  },
  "api/Stockage.SauveCollection.html": {
    "href": "api/Stockage.SauveCollection.html",
    "title": "Class SauveCollection | EasySaveWiki",
    "keywords": "Class SauveCollection Namespace Stockage Assembly Stockage.dll public class SauveCollection : BaseSave, ISauve Inheritance object BaseSave SauveCollection Implements ISauve Inherited Members BaseSave.FullPath BaseSave.Options BaseSave.Sauver<T>(T, string, bool, string) BaseSave.CopyDirectory(DirectoryInfo, DirectoryInfo, bool, bool) BaseSave.CopyDirectory(DirectoryInfo, DirectoryInfo, bool, ref CLogState, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SauveCollection(string) public SauveCollection(string pPath) Parameters pPath string"
  },
  "api/Stockage.SauveJobs.html": {
    "href": "api/Stockage.SauveJobs.html",
    "title": "Class SauveJobs | EasySaveWiki",
    "keywords": "Class SauveJobs Namespace Stockage Assembly Stockage.dll public class SauveJobs : BaseSave, ISauve Inheritance object BaseSave SauveJobs Implements ISauve Inherited Members BaseSave.FullPath BaseSave.Options BaseSave.Sauver<T>(T, string, bool, string) BaseSave.CopyDirectory(DirectoryInfo, DirectoryInfo, bool, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SauveJobs(string) public SauveJobs(string pPath) Parameters pPath string Properties TransferedFiles public int TransferedFiles { get; set; } Property Value int Methods CopyDirectory(DirectoryInfo, DirectoryInfo, bool, ref CLogState, bool) Copy files and directory from the soruce path to the destinationPath public override void CopyDirectory(DirectoryInfo pSourceDir, DirectoryInfo pTargetDir, bool pRecursive, ref CLogState pLogState, bool pForce = false) Parameters pSourceDir DirectoryInfo Path of the directory you want tot copy pTargetDir DirectoryInfo Path of the target directory pRecursive bool True if recursive pLogState CLogState pForce bool true if overwrite Exceptions DirectoryNotFoundException GetDirSize(string) public long GetDirSize(string pPath) Parameters pPath string Returns long UpdateLog(CLogState) public void UpdateLog(CLogState logState) Parameters logState CLogState"
  },
  "api/Stockage.Save.BaseSave.html": {
    "href": "api/Stockage.Save.BaseSave.html",
    "title": "Class BaseSave | EasySaveWiki",
    "keywords": "Class BaseSave Namespace Stockage.Save Assembly Stockage.dll Classe abstraite de base pour la sauvegrade d'un ficher ou le deplacement de Repertoire public abstract class BaseSave : ISauve Inheritance object BaseSave Implements ISauve Derived SauveCollection SauveJobs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseSave(string) Sauvgarde public BaseSave(string pPath) Parameters pPath string Directory Path Properties Options public JsonSerializerSettings Options { get; } Property Value JsonSerializerSettings Methods CopyDirectory(DirectoryInfo, DirectoryInfo, bool, ref CLogState, bool) public virtual void CopyDirectory(DirectoryInfo pSourceDir, DirectoryInfo pTargetDir, bool pRecursive, ref CLogState pLogState, bool pForce = false) Parameters pSourceDir DirectoryInfo pTargetDir DirectoryInfo pRecursive bool pLogState CLogState pForce bool CopyDirectory(DirectoryInfo, DirectoryInfo, bool, bool) Copy files and directory from the soruce path to the destinationPath public virtual void CopyDirectory(DirectoryInfo pSourceDir, DirectoryInfo pTargetDir, bool pRecursive, bool pForce = false) Parameters pSourceDir DirectoryInfo Path of the directory you want tot copy pTargetDir DirectoryInfo Path of the target directory pRecursive bool True if recursive pForce bool true if overwrite Exceptions DirectoryNotFoundException Sauver<T>(T, string, bool, string, bool) Crée un fichier Json par default avec les Settings public virtual void Sauver<T>(T pData, string pFileName, bool pAppend = false, string pExtention = \"json\", bool IsFullPath = false) Parameters pData T Data a sauvgarde pFileName string Name of the file pAppend bool pExtention string Extention of the file can be null IsFullPath bool Type Parameters T"
  },
  "api/Stockage.Save.ISauve.html": {
    "href": "api/Stockage.Save.ISauve.html",
    "title": "Interface ISauve | EasySaveWiki",
    "keywords": "Interface ISauve Namespace Stockage.Save Assembly Stockage.dll Interface ISauve public interface ISauve Remarks Mahmoud Charif - 31/12/2022 - Création Methods CopyDirectory(DirectoryInfo, DirectoryInfo, bool, bool) Copy files and directory from the soruce path to the destinationPath void CopyDirectory(DirectoryInfo pSourceDir, DirectoryInfo pTargetDir, bool pRecursive, bool pForce = false) Parameters pSourceDir DirectoryInfo Path of the directory you want tot copy pTargetDir DirectoryInfo Path of the target directory pRecursive bool True if recursive pForce bool true if overwrite Exceptions DirectoryNotFoundException Sauver<T>(T, string, bool, string, bool) Sauvagarde les données dans un fichier void Sauver<T>(T pData, string pFileName, bool pAppend = false, string pExtention = \"json\", bool IsFullPath = false) Parameters pData T Data to serialize pFileName string File name pAppend bool True si on veux append sur le fichier pExtention string Extention IsFullPath bool vrai si pFileName est un chemin complet Type Parameters T Remarks Mahmoud Charif - 31/12/2022 - Création"
  },
  "api/Stockage.Save.SauveCollection.html": {
    "href": "api/Stockage.Save.SauveCollection.html",
    "title": "Class SauveCollection | EasySaveWiki",
    "keywords": "Class SauveCollection Namespace Stockage.Save Assembly Stockage.dll Classe permettant la sauvegarde d'un objet public class SauveCollection : BaseSave, ISauve Inheritance object BaseSave SauveCollection Implements ISauve Inherited Members BaseSave.Options BaseSave.Sauver<T>(T, string, bool, string, bool) BaseSave.CopyDirectory(DirectoryInfo, DirectoryInfo, bool, bool) BaseSave.CopyDirectory(DirectoryInfo, DirectoryInfo, bool, ref CLogState, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SauveCollection(string) public SauveCollection(string pPath) Parameters pPath string"
  },
  "api/Stockage.Save.SauveJobs.html": {
    "href": "api/Stockage.Save.SauveJobs.html",
    "title": "Class SauveJobs | EasySaveWiki",
    "keywords": "Class SauveJobs Namespace Stockage.Save Assembly Stockage.dll Classe permettant de sauvegarder des jobs et de les logger public class SauveJobs : BaseSave, ISauve Inheritance object BaseSave SauveJobs Implements ISauve Inherited Members BaseSave.Options BaseSave.Sauver<T>(T, string, bool, string, bool) BaseSave.CopyDirectory(DirectoryInfo, DirectoryInfo, bool, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SauveJobs(string) public SauveJobs(string pPath = null) Parameters pPath string Properties TransferedFiles public int TransferedFiles { get; set; } Property Value int Methods CopyDirectory(DirectoryInfo, DirectoryInfo, bool, ref CLogState, bool) Copy files and directory from the soruce path to the destinationPath public override void CopyDirectory(DirectoryInfo pSourceDir, DirectoryInfo pTargetDir, bool pRecursive, ref CLogState pLogState, bool pDiffertielle = false) Parameters pSourceDir DirectoryInfo Path of the directory you want tot copy pTargetDir DirectoryInfo Path of the target directory pRecursive bool True if recursive pLogState CLogState pDiffertielle bool true if the backup is differentiel Exceptions DirectoryNotFoundException GetDirSize(string) Calcule la taille d'un repertoire public long GetDirSize(string pPath) Parameters pPath string Chemin du repertoire Returns long la taille du repertoire en bytes UpdateLog(CLogState) UpdateLog public void UpdateLog(CLogState logState) Parameters logState CLogState Log a jour"
  },
  "api/Stockage.Save.html": {
    "href": "api/Stockage.Save.html",
    "title": "Namespace Stockage.Save | EasySaveWiki",
    "keywords": "Namespace Stockage.Save Classes BaseSave Classe abstraite de base pour la sauvegrade d'un ficher ou le deplacement de Repertoire SauveCollection Classe permettant la sauvegarde d'un objet SauveJobs Classe permettant de sauvegarder des jobs et de les logger Interfaces ISauve Interface ISauve"
  },
  "api/Stockage.html": {
    "href": "api/Stockage.html",
    "title": "Namespace Stockage | EasySaveWiki",
    "keywords": "Namespace Stockage Classes BaseSave ChargerCollection SauveCollection SauveJobs Interfaces ICharge Interface sur un chargeur de dictionnaire ISauve Interface ISauve"
  },
  "api/UnitTestJobs.JobsTestUnit.html": {
    "href": "api/UnitTestJobs.JobsTestUnit.html",
    "title": "Class JobsTestUnit | EasySaveWiki",
    "keywords": "Class JobsTestUnit Namespace UnitTestJobs Assembly UnitTestJobs.dll public class JobsTestUnit Inheritance object JobsTestUnit Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateJob() [Fact] public void CreateJob() DeleteJob() [Fact] public void DeleteJob() SaveLoadJobManager() [Fact] public void SaveLoadJobManager() SaveLoadJobs() [Fact] public void SaveLoadJobs()"
  },
  "api/UnitTestJobs.html": {
    "href": "api/UnitTestJobs.html",
    "title": "Namespace UnitTestJobs | EasySaveWiki",
    "keywords": "Namespace UnitTestJobs Classes JobsTestUnit"
  },
  "api/UnitTestStorage.StockageTestUnit.html": {
    "href": "api/UnitTestStorage.StockageTestUnit.html",
    "title": "Class StockageTestUnit | EasySaveWiki",
    "keywords": "Class StockageTestUnit Namespace UnitTestStorage Assembly UnitTestStorage.dll public class StockageTestUnit Inheritance object StockageTestUnit Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestSerialisation() [Fact] public void TestSerialisation()"
  },
  "api/UnitTestStorage.html": {
    "href": "api/UnitTestStorage.html",
    "title": "Namespace UnitTestStorage | EasySaveWiki",
    "keywords": "Namespace UnitTestStorage Classes StockageTestUnit"
  },
  "api/ViewModels.BaseViewModel.html": {
    "href": "api/ViewModels.BaseViewModel.html",
    "title": "Class BaseViewModel | EasySaveWiki",
    "keywords": "Class BaseViewModel Namespace ViewModels Assembly ViewModels.dll Classe abstraite BaseViewModel public abstract class BaseViewModel : INotifyPropertyChanged Inheritance object BaseViewModel Implements INotifyPropertyChanged Derived JobViewModel LangueViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NotifyPropertyChanged(string) Méthode à appler pour avertir d'une modification protected void NotifyPropertyChanged(string propertyName = \"\") Parameters propertyName string Nom de la property modifiée (authomatiquement déterminé si appelé directement dans le setter une property) Events PropertyChanged Evénement de modification d'une property public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/ViewModels.JobViewModel.html": {
    "href": "api/ViewModels.JobViewModel.html",
    "title": "Class JobViewModel | EasySaveWiki",
    "keywords": "Class JobViewModel Namespace ViewModels Assembly ViewModels.dll Classe JobViewModel public class JobViewModel : BaseViewModel, INotifyPropertyChanged Inheritance object BaseViewModel JobViewModel Implements INotifyPropertyChanged Inherited Members BaseViewModel.PropertyChanged BaseViewModel.NotifyPropertyChanged(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JobViewModel() Constructeur de JobViewModel initialise le JobManager public JobViewModel() Properties JobManager JobManager public CJobManager JobManager { get; set; } Property Value CJobManager Methods CreateBackupJob(CJob) Crée un nouveau job de sauvegarde public bool CreateBackupJob(CJob lJob) Parameters lJob CJob Job à créer Returns bool Succès de la création DeleteJobs(List<CJob>) Supprimer un ou plusieurs jobs public bool DeleteJobs(List<CJob> pJobs) Parameters pJobs List<CJob> List de jobs a delete Returns bool vrai si les jobs on été delete LoadJobs(bool, string) Charge la liste des jobs depuis un fichier public void LoadJobs(bool IsDefaultFile = true, string pPath = null) Parameters IsDefaultFile bool Indique si le fichier par défaut doit être chargé pPath string Chemin du fichier à charger, vide pour le fichier par défaut RunJobs(List<CJob>) Lance l'exécution des jobs sélectionnés public List<CJob> RunJobs(List<CJob> pJobs) Parameters pJobs List<CJob> Liste des jobs à lancer Returns List<CJob> Liste mise à jour des jobs avec leur état après exécution SaveJobs() Sauvegarde la configuration des jobs public void SaveJobs()"
  },
  "api/ViewModels.LangueViewModel.html": {
    "href": "api/ViewModels.LangueViewModel.html",
    "title": "Class LangueViewModel | EasySaveWiki",
    "keywords": "Class LangueViewModel Namespace ViewModels Assembly ViewModels.dll Classe View Model de la langue public class LangueViewModel : BaseViewModel, INotifyPropertyChanged Inheritance object BaseViewModel LangueViewModel Implements INotifyPropertyChanged Inherited Members BaseViewModel.PropertyChanged BaseViewModel.NotifyPropertyChanged(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LangueViewModel() Constructeur de la LangueViewModel public LangueViewModel() Properties Langue Classe model de la langue public CLangue Langue { get; set; } Property Value CLangue Methods SetLanguage(string) Set the current language public bool SetLanguage(string pCultureInfo) Parameters pCultureInfo string give a number Returns bool true if the language was changed"
  },
  "api/ViewModels.MainViewModel.html": {
    "href": "api/ViewModels.MainViewModel.html",
    "title": "Class MainViewModel | EasySaveWiki",
    "keywords": "Class MainViewModel Namespace ViewModels Assembly ViewModels.dll Modèle de vue principal regroupant les différents modèles de vue public class MainViewModel Inheritance object MainViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MainViewModel() Le constructeur MainViewModel initialise les modèles de vue et charge les paramètres de l'utilisateur public MainViewModel() Properties JobVm View model des jobs public JobViewModel JobVm { get; set; } Property Value JobViewModel LangueVm View Model de la langue public LangueViewModel LangueVm { get; set; } Property Value LangueViewModel"
  },
  "api/ViewModels.html": {
    "href": "api/ViewModels.html",
    "title": "Namespace ViewModels | EasySaveWiki",
    "keywords": "Namespace ViewModels Classes BaseViewModel Classe abstraite BaseViewModel JobViewModel Classe JobViewModel LangueViewModel Classe View Model de la langue MainViewModel Modèle de vue principal regroupant les différents modèles de vue"
  },
  "docs/Guide d'utilisation/Guide d'utilisation.html": {
    "href": "docs/Guide d'utilisation/Guide d'utilisation.html",
    "title": "Guide d'utilisation EasySave 1.0 | EasySaveWiki",
    "keywords": "Guide d'utilisation EasySave 1.0 Démarrer l'application Exécuter le fichier EasySave.exe EasySave requiert la version .NET 6 ou supérieure. Il est compatible avec les systèmes d'exploitation suivants : Windows 7 et versions ultérieures macOS 10.13 et versions ultérieures Linux avec les distributions basées sur Debian/Ubuntu ou Red Hat/CentOS Sur Linux, les raccourcis clavier de copier-coller ne sont pas disponibles, mais l'application reste utilisable. Sur Linux avec interface graphique, l'utilitaire xsel doit être installé pour l'utilisation des raccourcis Ctrl-C/Ctrl-V. Menu principal Le menu principal s'affiche: Raccourcis clavier EasySave prend en charge les raccourcis clavier suivants: CTRL+C : Effacer le contenu de la console CTRL+V : Coller le contenu du presse-papier dans la console Ces raccourcis permettent d'interagir rapidement avec l'interface sans utiliser la souris. Choisir la langue Permet de sélectionner la langue d'interface parmi les langues supportées Lister les jobs Affiche la liste des profils de sauvegarde configurés Charger une configuration de Jobs Importe les paramètres d'un fichier de configuration existant Créer un job Configure un nouveau profil de sauvegarde Supprimer un job Supprime définitivement un profil de sauvegarde sélectionné Lancer les jobs Démarre les sauvegardes planifiées ou manuelles"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | EasySaveWiki",
    "keywords": "Introduction La branche livrable-1 contient la première version fonctionnelle d'EasySave, conformément au cahier des charges de ProSoft. Cette version initie le développement d'une application console en .NET Core pour la gestion de travaux de sauvegarde. Prérequis Installation process Clonez la branche livrable-1 et ouvrez le projet avec Visual Studio 2022. Veillez à avoir .NET Core 6.X installé. Software dependencies .NET Core 6.X Visual Studio 2022 Latest releases Veuillez consulter l'onglet des releases pour accéder à la dernière version du livrable 1 (Pipelines -> Releases) : https://dev.azure.com/faikmehmeti/G4-FISA-24/_release?_a=releases&view=mine&definitionId=1 Build and Test Un pull request vers la branche develop-livrable-1 entraîne automatiquement un processus de build et de tests (tests unitaires uniquement). Un pull request vers la branche livrable-1 entraîne automatiquement un processus d'intégration continue, allant du build, aux tests, jusqu'à la publication d'une release. Ces processus sont consultables via les pipelines : https://dev.azure.com/faikmehmeti/G4-FISA-24/_build NOTES : Un seul agent pourra gérer l'éxécution d'une unique pipeline, le paralélisme n'est pas possible. Contribute Pour contribuer à cette branche, voici le processus à suivre et les nommages à respecter : Depuis Boards (Menu latéral) Dans backlogs : Ajout d'un User Story (Fonctionnalité) -> Button (New Work Item) -> Title: description ... Ajout d'une tache fixbug -> Button (New Work Item) -> Title: description... Dans boards (Tableau Kanban) : Mettre à jour l'état de la tache -> Boards (Tableau KanBan : To Do, Doing, Done) Active (Fonctionnalité en cours de dév), Closed (Fonctionnalité fini). Ne pas mettre la card sur l'état résolved pour garder une trace, sinon elle disparait. Work items : Aller : sur la tache que vous voulez effectuer Pour associer : une branche à la tace : create a branch Nom de la branche : feature/NumTache-description-courte ou fixbug/NumTache-description-courte Based on : Toujours tirer la branche depuis develop-livrable-1 Push/Pull Request/Merge Conflicts on Develop : Lors du push, notif : Create a pull request Into : develop-livrable-1 Mettre une description détaillée Attente du merge conflicts + Pipeline Build & Test Complete PR -> Complete merge Une fois la PR mergée sur Azure Devops, mettre à jour la branche livrable-1 si tout fonctionne En local : git checkout develop-livrable-1 git pull origin develop-livrable-1 (Pour récup les PR mergées) Tester sur l'application si tout marche Depuis Repos (Menu latéral) Sur azure devops : Créer une nouvelle PR (onglet Pull requests) avec cette fois into livrable-1 Attente du merge conflicts + Pipeline Build & Test & Push Release !!! Atention lors du merge validé décocher supprimer cette branche !!!"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | EasySaveWiki",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "releases/release1.html": {
    "href": "releases/release1.html",
    "title": "Release note 1 Test | EasySaveWiki",
    "keywords": "Release note 1 Test"
  }
}